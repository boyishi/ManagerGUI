package CustomerGUI;

import java.sql.*;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.util.Date;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.util.Map;


public class CustomerGUI extends javax.swing.JFrame {
    private static final String username = "riceboishi";
    private static final String password = "528000997";
    private static final String dataConn = "jdbc:postgresql://csce-315-db.engr.tamu.edu/db900_group6_project2";
    
    static Connection conn = null;
    static Statement stmt;
    static PreparedStatement pst = null;
    static ResultSet rs = null;
    static ResultSetMetaData rsmd;
    
    double cTotal;
    double cTax;
    double finalCost;
    
    int numCookies = 0;
    int numChocolateBars = 0;
    int numSundaes = 0;
    
    int numKelpShakes = 0;
    int numRootBeers = 0;
    int numSprites = 0;
    int numSeaSodas = 0;
    int numDrPeppers = 0;
    
    int numCoralBits = 0;
    int numSticks = 0;
    int numKelpRings = 0;
    int numGGs = 0;
    
    int numSeaDogs = 0;
    int numSuprises = 0;
    int numFootlongs = 0;
    int numLoafs = 0;
    int numKPs = 0;
    int numTKPs = 0;
    int numDKPs = 0;
  
    /**
     * Creates new form POS
     */
    public CustomerGUI() {
        initComponents();
    }
    
    public void close(){
        WindowEvent closeWindow = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }
   
    /**
     * Get the item cost
     */

    public void ItemCost(){
        double sum = 0;
        double itemCost;
        int quantity;
        for (int i = 0; i < table.getRowCount(); i++){
            itemCost = Double.parseDouble(table.getValueAt(i,2).toString());
            quantity = Integer.parseInt(table.getValueAt(i, 1).toString());
            sum += (itemCost * quantity);
        }
        subT.setText(Double.toString(sum));
        cTotal = Double.parseDouble(subT.getText());
        
        cTax = (cTotal * 8.25) / 100; // with Texas tax - 8.25%
        String iTaxTotal = String.format("$ %.2f", cTax);
        tax.setText(iTaxTotal);
        
        String iSubTotal = String.format("$ %.2f", cTotal);
        subT.setText(iSubTotal);
        
        finalCost = cTotal + cTax;
        String iTotal = String.format("$ %.2f", finalCost);
        totalText.setText(iTotal);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        DoubleKP = new javax.swing.JButton();
        TripleKP = new javax.swing.JButton();
        KrabbyPattyE = new javax.swing.JButton();
        DrPepper = new javax.swing.JButton();
        SeafoamSoda = new javax.swing.JButton();
        KelpShakeB = new javax.swing.JButton();
        RootBeer = new javax.swing.JButton();
        Sprite = new javax.swing.JButton();
        GarysGibble = new javax.swing.JButton();
        Sundae = new javax.swing.JButton();
        AnenomeSticks = new javax.swing.JButton();
        KelpRings = new javax.swing.JButton();
        CoralBitsS = new javax.swing.JButton();
        Cookie = new javax.swing.JButton();
        Chocolate = new javax.swing.JButton();
        Title = new javax.swing.JLabel();
        custFN = new javax.swing.JLabel();
        custLN = new javax.swing.JLabel();
        Desserts = new javax.swing.JLabel();
        Beverages = new javax.swing.JLabel();
        Sides = new javax.swing.JLabel();
        Entrees = new javax.swing.JLabel();
        SaltySeaDog = new javax.swing.JButton();
        Footlong = new javax.swing.JButton();
        SailorsSup = new javax.swing.JButton();
        GoldenLoaf = new javax.swing.JButton();
        instructions = new javax.swing.JLabel();
        small = new javax.swing.JButton();
        medium = new javax.swing.JButton();
        popular = new javax.swing.JLabel();
        KrabbyPattyR = new javax.swing.JButton();
        KelpShakeR = new javax.swing.JButton();
        large = new javax.swing.JButton();
        custom = new javax.swing.JButton();
        seaWeed = new javax.swing.JButton();
        bill = new javax.swing.JPanel();
        totalText = new javax.swing.JTextField();
        scrollBar = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        total_text = new javax.swing.JTextField();
        subT = new javax.swing.JTextField();
        tax = new javax.swing.JTextField();
        lbSubT = new javax.swing.JLabel();
        lbSubT1 = new javax.swing.JLabel();
        lbSubT2 = new javax.swing.JLabel();
        options = new javax.swing.JPanel();
        pay = new javax.swing.JButton();
        printR = new javax.swing.JButton();
        instr1b = new javax.swing.JLabel();
        instr2 = new javax.swing.JLabel();
        instr1a = new javax.swing.JLabel();
        instr1b2 = new javax.swing.JLabel();
        instr1 = new javax.swing.JLabel();
        instr3 = new javax.swing.JLabel();
        instr4 = new javax.swing.JLabel();
        logo = new javax.swing.JLabel();
        Entrees1 = new javax.swing.JLabel();
        CoralBitsR1 = new javax.swing.JButton();
        kelp = new javax.swing.JButton();
        mustard = new javax.swing.JButton();
        buns = new javax.swing.JButton();
        ketchup = new javax.swing.JButton();
        seaSalt = new javax.swing.JButton();
        saltySauce = new javax.swing.JButton();
        seaCuc = new javax.swing.JButton();
        seaCheese = new javax.swing.JButton();
        seaPickles = new javax.swing.JButton();
        jelly = new javax.swing.JButton();
        patty = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        date = new javax.swing.JLabel();
        exit = new javax.swing.JButton();
        instr5 = new javax.swing.JLabel();
        custLn = new javax.swing.JTextField();
        custFn = new javax.swing.JTextField();
        removeBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 228, 181));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.white);

        MainPanel.setBackground(new java.awt.Color(255, 228, 181));
        MainPanel.setForeground(new java.awt.Color(153, 0, 51));
        MainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DoubleKP.setBackground(new java.awt.Color(138, 209, 193));
        DoubleKP.setText("Double K.P");
        DoubleKP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoubleKPActionPerformed(evt);
            }
        });
        MainPanel.add(DoubleKP, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 210, 100, 40));

        TripleKP.setBackground(new java.awt.Color(138, 209, 193));
        TripleKP.setText("Triple K.P");
        TripleKP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TripleKPActionPerformed(evt);
            }
        });
        MainPanel.add(TripleKP, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 260, 100, 40));

        KrabbyPattyE.setBackground(new java.awt.Color(138, 209, 193));
        KrabbyPattyE.setText("Krabby Patty");
        KrabbyPattyE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KrabbyPattyEActionPerformed(evt);
            }
        });
        MainPanel.add(KrabbyPattyE, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 160, 100, 40));

        DrPepper.setBackground(new java.awt.Color(173, 126, 191));
        DrPepper.setText("Dr. Pepper");
        DrPepper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrPepperActionPerformed(evt);
            }
        });
        MainPanel.add(DrPepper, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 210, 100, 40));

        SeafoamSoda.setBackground(new java.awt.Color(173, 126, 191));
        SeafoamSoda.setText("Sea Soda");
        SeafoamSoda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeafoamSodaActionPerformed(evt);
            }
        });
        MainPanel.add(SeafoamSoda, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 160, 100, 40));

        KelpShakeB.setBackground(new java.awt.Color(173, 126, 191));
        KelpShakeB.setText("Kelp Shake");
        KelpShakeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KelpShakeBActionPerformed(evt);
            }
        });
        MainPanel.add(KelpShakeB, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 160, 100, 40));

        RootBeer.setBackground(new java.awt.Color(173, 126, 191));
        RootBeer.setText("Root Beer");
        RootBeer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RootBeerActionPerformed(evt);
            }
        });
        MainPanel.add(RootBeer, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 211, 100, 40));

        Sprite.setBackground(new java.awt.Color(173, 126, 191));
        Sprite.setText("Sprite");
        Sprite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpriteActionPerformed(evt);
            }
        });
        MainPanel.add(Sprite, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 260, 100, 40));

        GarysGibble.setBackground(new java.awt.Color(255, 127, 131));
        GarysGibble.setText("Gary's Gibble");
        GarysGibble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GarysGibbleActionPerformed(evt);
            }
        });
        MainPanel.add(GarysGibble, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 210, 100, 40));

        Sundae.setBackground(new java.awt.Color(255, 153, 255));
        Sundae.setText("Sundae");
        Sundae.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SundaeActionPerformed(evt);
            }
        });
        MainPanel.add(Sundae, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 211, 100, 40));

        AnenomeSticks.setBackground(new java.awt.Color(255, 127, 131));
        AnenomeSticks.setText("Sticks");
        AnenomeSticks.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AnenomeSticks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnenomeSticksActionPerformed(evt);
            }
        });
        MainPanel.add(AnenomeSticks, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 210, 100, 40));

        KelpRings.setBackground(new java.awt.Color(255, 127, 131));
        KelpRings.setText("Kelp Rings");
        KelpRings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KelpRingsActionPerformed(evt);
            }
        });
        MainPanel.add(KelpRings, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 160, 100, 40));

        CoralBitsS.setBackground(new java.awt.Color(255, 127, 131));
        CoralBitsS.setText("Coral Bits");
        CoralBitsS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoralBitsSActionPerformed(evt);
            }
        });
        MainPanel.add(CoralBitsS, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 160, 100, 40));

        Cookie.setBackground(new java.awt.Color(255, 153, 255));
        Cookie.setText("Cookie");
        Cookie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CookieActionPerformed(evt);
            }
        });
        MainPanel.add(Cookie, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 160, 100, 40));

        Chocolate.setBackground(new java.awt.Color(255, 153, 255));
        Chocolate.setText("Chocolate Bar");
        Chocolate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChocolateActionPerformed(evt);
            }
        });
        MainPanel.add(Chocolate, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 160, 100, 40));

        Title.setBackground(new java.awt.Color(173, 216, 230));
        Title.setFont(new java.awt.Font("Goudy Stout", 1, 36)); // NOI18N
        Title.setForeground(new java.awt.Color(153, 0, 51));
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("Gallery Grub");
        MainPanel.add(Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 0, 660, 60));

        custFN.setBackground(new java.awt.Color(204, 255, 153));
        custFN.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        custFN.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        custFN.setText("Customer First Name");
        custFN.setOpaque(true);
        MainPanel.add(custFN, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 150, 30));

        custLN.setBackground(new java.awt.Color(204, 255, 153));
        custLN.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        custLN.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        custLN.setText("Customer Last Name");
        custLN.setOpaque(true);
        MainPanel.add(custLN, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 150, 30));

        Desserts.setBackground(new java.awt.Color(173, 216, 230));
        Desserts.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Desserts.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Desserts.setText("Desserts");
        Desserts.setOpaque(true);
        MainPanel.add(Desserts, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 120, 230, 30));

        Beverages.setBackground(new java.awt.Color(173, 216, 230));
        Beverages.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Beverages.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Beverages.setText("Beverages");
        Beverages.setOpaque(true);
        MainPanel.add(Beverages, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 120, 230, 30));

        Sides.setBackground(new java.awt.Color(173, 216, 230));
        Sides.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Sides.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Sides.setText("Sides");
        Sides.setOpaque(true);
        MainPanel.add(Sides, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 120, 230, 30));

        Entrees.setBackground(new java.awt.Color(173, 216, 230));
        Entrees.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Entrees.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Entrees.setText("Toppings");
        Entrees.setOpaque(true);
        MainPanel.add(Entrees, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 427, 490, 30));

        SaltySeaDog.setBackground(new java.awt.Color(138, 209, 193));
        SaltySeaDog.setText("Salty Sea Dog");
        SaltySeaDog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaltySeaDogActionPerformed(evt);
            }
        });
        MainPanel.add(SaltySeaDog, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 160, 100, 40));

        Footlong.setBackground(new java.awt.Color(138, 209, 193));
        Footlong.setText("Footlong");
        Footlong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FootlongActionPerformed(evt);
            }
        });
        MainPanel.add(Footlong, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 260, 100, 40));

        SailorsSup.setBackground(new java.awt.Color(138, 209, 193));
        SailorsSup.setText("Sailors Suprise");
        SailorsSup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SailorsSupActionPerformed(evt);
            }
        });
        MainPanel.add(SailorsSup, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 210, -1, 40));

        GoldenLoaf.setBackground(new java.awt.Color(138, 209, 193));
        GoldenLoaf.setText("Golden Loaf");
        GoldenLoaf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoldenLoafActionPerformed(evt);
            }
        });
        MainPanel.add(GoldenLoaf, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 310, 100, 40));

        instructions.setBackground(new java.awt.Color(255, 255, 255));
        instructions.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        instructions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        instructions.setText("Instructions");
        instructions.setOpaque(true);
        MainPanel.add(instructions, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 427, 490, 30));

        small.setText("SMALL");
        small.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smallActionPerformed(evt);
            }
        });
        MainPanel.add(small, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 627, 120, 60));

        medium.setText("MEDIUM");
        medium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediumActionPerformed(evt);
            }
        });
        MainPanel.add(medium, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 627, 120, 60));

        popular.setBackground(new java.awt.Color(255, 102, 255));
        popular.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        popular.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        popular.setText("POPULAR");
        popular.setOpaque(true);
        MainPanel.add(popular, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 617, 230, 30));

        KrabbyPattyR.setBackground(new java.awt.Color(138, 209, 193));
        KrabbyPattyR.setText("Krabby Patty");
        KrabbyPattyR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KrabbyPattyRActionPerformed(evt);
            }
        });
        MainPanel.add(KrabbyPattyR, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 657, 100, 40));

        KelpShakeR.setBackground(new java.awt.Color(173, 126, 191));
        KelpShakeR.setText("Kelp Shake");
        KelpShakeR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KelpShakeRActionPerformed(evt);
            }
        });
        MainPanel.add(KelpShakeR, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 707, 100, 40));

        large.setText("LARGE");
        large.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                largeActionPerformed(evt);
            }
        });
        MainPanel.add(large, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 697, 120, 60));

        custom.setText("CUSTOM");
        custom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customActionPerformed(evt);
            }
        });
        MainPanel.add(custom, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 697, 120, 60));

        seaWeed.setBackground(java.awt.Color.orange);
        seaWeed.setText("Sea Weed");
        seaWeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seaWeedActionPerformed(evt);
            }
        });
        MainPanel.add(seaWeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 567, 100, 40));

        bill.setBackground(new java.awt.Color(255, 255, 255));

        totalText.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        totalText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalText.setText("TOTAL");
        totalText.setBorder(null);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Qty.", "Amount"
            }
        ));
        scrollBar.setViewportView(table);

        total_text.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        total_text.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        total_text.setText("TOTAL");
        total_text.setBorder(null);

        subT.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        subT.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        subT.setText("SubTotal");
        subT.setBorder(null);

        tax.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        tax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tax.setText("Tax");
        tax.setBorder(null);
        tax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taxActionPerformed(evt);
            }
        });

        lbSubT.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbSubT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbSubT.setText("Total");

        lbSubT1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbSubT1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbSubT1.setText("SubTotal");

        lbSubT2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbSubT2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbSubT2.setText("Tax");

        javax.swing.GroupLayout billLayout = new javax.swing.GroupLayout(bill);
        bill.setLayout(billLayout);
        billLayout.setHorizontalGroup(
            billLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(billLayout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(total_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(scrollBar, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(billLayout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(lbSubT1)
                .addGap(15, 15, 15)
                .addComponent(subT, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(billLayout.createSequentialGroup()
                .addGap(260, 260, 260)
                .addComponent(lbSubT2)
                .addGap(39, 39, 39)
                .addComponent(tax, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(billLayout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addComponent(lbSubT)
                .addGap(9, 9, 9)
                .addComponent(totalText, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        billLayout.setVerticalGroup(
            billLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(billLayout.createSequentialGroup()
                .addComponent(total_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(scrollBar, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(billLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbSubT1)
                    .addComponent(subT, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(billLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbSubT2)
                    .addComponent(tax, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(billLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbSubT)
                    .addComponent(totalText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        MainPanel.add(bill, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, -1, -1));

        pay.setBackground(new java.awt.Color(204, 255, 153));
        pay.setText("PAY");
        pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payActionPerformed(evt);
            }
        });

        printR.setBackground(new java.awt.Color(255, 255, 255));
        printR.setText("Print Receipt");
        printR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printRActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionsLayout = new javax.swing.GroupLayout(options);
        options.setLayout(optionsLayout);
        optionsLayout.setHorizontalGroup(
            optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(pay, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(printR, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        optionsLayout.setVerticalGroup(
            optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pay, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(printR, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainPanel.add(options, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 642, -1, -1));

        instr1b.setText("b. \"Remove Toppings\" from Entrees ONLY - each entree will come with all toppings,");
        MainPanel.add(instr1b, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 507, 470, -1));

        instr2.setText("4. Press \"Print Receipt\" to have your receipt printed");
        MainPanel.add(instr2, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 587, 490, -1));

        instr1a.setText("a. if it is a recommended item, you may click on the item via the \"Recommend\" section");
        MainPanel.add(instr1a, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 487, 470, -1));

        instr1b2.setText("so you may choose to remove them by clicking on the certain topping in this section");
        MainPanel.add(instr1b2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 527, -1, -1));

        instr1.setText("1. Enter your info then begin to select what items you would like");
        MainPanel.add(instr1, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 467, 490, -1));

        instr3.setText("3. Use the \"RESET\" to clear order");
        MainPanel.add(instr3, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 567, -1, -1));

        instr4.setText("5. Press \"PAY\", and \"PLACE ORDER\" to complete an order");
        MainPanel.add(instr4, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 607, -1, -1));

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.png"))); // NOI18N
        MainPanel.add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1348, 607, -1, 120));

        Entrees1.setBackground(new java.awt.Color(173, 216, 230));
        Entrees1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Entrees1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Entrees1.setText("Entrees");
        Entrees1.setOpaque(true);
        MainPanel.add(Entrees1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 120, 230, 30));

        CoralBitsR1.setBackground(new java.awt.Color(255, 127, 131));
        CoralBitsR1.setText("Coral Bits");
        CoralBitsR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoralBitsR1ActionPerformed(evt);
            }
        });
        MainPanel.add(CoralBitsR1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 657, 100, 40));

        kelp.setBackground(java.awt.Color.orange);
        kelp.setText("Kelp");
        kelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kelpActionPerformed(evt);
            }
        });
        MainPanel.add(kelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 467, 100, 40));

        mustard.setBackground(java.awt.Color.orange);
        mustard.setText("Mustard");
        mustard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mustardActionPerformed(evt);
            }
        });
        MainPanel.add(mustard, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 517, 100, 40));

        buns.setBackground(java.awt.Color.orange);
        buns.setText("Buns");
        buns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bunsActionPerformed(evt);
            }
        });
        MainPanel.add(buns, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 567, 100, 40));

        ketchup.setBackground(java.awt.Color.orange);
        ketchup.setText("Ketchup");
        ketchup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ketchupActionPerformed(evt);
            }
        });
        MainPanel.add(ketchup, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 467, 100, 40));

        seaSalt.setBackground(java.awt.Color.orange);
        seaSalt.setText("Sea Salt");
        seaSalt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seaSaltActionPerformed(evt);
            }
        });
        MainPanel.add(seaSalt, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 467, 100, 40));

        saltySauce.setBackground(java.awt.Color.orange);
        saltySauce.setText("Salty Sauce");
        saltySauce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saltySauceActionPerformed(evt);
            }
        });
        MainPanel.add(saltySauce, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 467, 100, 40));

        seaCuc.setBackground(java.awt.Color.orange);
        seaCuc.setText("Sea Cuc.");
        seaCuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seaCucActionPerformed(evt);
            }
        });
        MainPanel.add(seaCuc, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 517, 100, 40));

        seaCheese.setBackground(java.awt.Color.orange);
        seaCheese.setText("Sea Cheese");
        seaCheese.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seaCheeseActionPerformed(evt);
            }
        });
        MainPanel.add(seaCheese, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 567, 100, 40));

        seaPickles.setBackground(java.awt.Color.orange);
        seaPickles.setText("Sea Pickles");
        seaPickles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seaPicklesActionPerformed(evt);
            }
        });
        MainPanel.add(seaPickles, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 517, 100, 40));

        jelly.setBackground(java.awt.Color.orange);
        jelly.setText("Jelly");
        jelly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jellyActionPerformed(evt);
            }
        });
        MainPanel.add(jelly, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 517, 100, 40));

        patty.setBackground(java.awt.Color.orange);
        patty.setText("Patty");
        patty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pattyActionPerformed(evt);
            }
        });
        MainPanel.add(patty, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 567, 100, 40));

        delete.setBackground(new java.awt.Color(255, 153, 255));
        delete.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        delete.setText("RESET");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        MainPanel.add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 630, 100, 50));

        date.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        String dateS = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
        date.setText("Date: " + dateS);
        MainPanel.add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 250, 20));

        exit.setBackground(new java.awt.Color(202, 0, 0));
        exit.setForeground(new java.awt.Color(255, 255, 255));
        exit.setText("X");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        MainPanel.add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1440, 0, 40, 30));

        instr5.setText("2. Select item in the table, then \"REMOVE\" to get rid of that row");
        MainPanel.add(instr5, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 547, 490, -1));

        custLn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custLnActionPerformed(evt);
            }
        });
        MainPanel.add(custLn, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, 190, 30));

        custFn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custFnActionPerformed(evt);
            }
        });
        MainPanel.add(custFn, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, 190, 30));

        removeBtn.setBackground(new java.awt.Color(255, 153, 153));
        removeBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        removeBtn.setText("REMOVE");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });
        MainPanel.add(removeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 630, 90, 50));

        searchBtn.setBackground(new java.awt.Color(255, 153, 153));
        searchBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchBtn.setText("SEARCH");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        MainPanel.add(searchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 630, 90, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void seaCheeseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seaCheeseActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 0;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"RM. Sea Cheese", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_seaCheeseActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
        
        ItemCost();
        
        numCookies = 0;
        numChocolateBars = 0;
        numSundaes = 0;
        
        numKelpShakes = 0;
        numRootBeers = 0;
        numSprites = 0;
        numSeaSodas = 0;
        numDrPeppers = 0;
        
        numCoralBits = 0;
        numSticks = 0;
        numKelpRings = 0;
        numGGs = 0;
        
        numSeaDogs = 0;
        numSuprises = 0;
        numFootlongs = 0;
        numLoafs = 0;
        numKPs = 0;
        numTKPs = 0;
        numDKPs = 0;
    }//GEN-LAST:event_deleteActionPerformed

    private void taxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taxActionPerformed
    
  
    private void CookieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CookieActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 0.75;
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        
        if (numCookies == 0){
            model.addRow(new Object[]{"Cookie", "1", PriceOfItem});
        }
        else {
            int numRows = model.getRowCount();
            for (int i = 0; i < numRows; i++){
                if (model.getValueAt(i, 0).toString() == "Cookie"){
                    model.setValueAt(numCookies + 1, i, 1);
                }
            }   
        }
        
        numCookies += 1;
        ItemCost();
    }//GEN-LAST:event_CookieActionPerformed
   
 
    private void ChocolateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChocolateActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 1.00;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        
        if (numChocolateBars  == 0){
            model.addRow(new Object[]{"Chocolate Bar", "1", PriceOfItem});
        }
        else {
            int numRows = model.getRowCount();
            for (int i = 0; i < numRows; i++){
                if (model.getValueAt(i, 0).toString() == "Chocolate Bar"){
                    model.setValueAt(numChocolateBars + 1, i, 1);
                }
            }   
        }
        
        numChocolateBars += 1; 
        ItemCost();
    }//GEN-LAST:event_ChocolateActionPerformed
   
   
    private void SundaeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SundaeActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 2.25;
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        
        if (numSundaes  == 0){
            model.addRow(new Object[]{"Sundae", "1", PriceOfItem});
        }
        else {
            int numRows = model.getRowCount();
            for (int i = 0; i < numRows; i++){
                if (model.getValueAt(i, 0).toString() == "Sundae"){
                    model.setValueAt(numSundaes + 1, i, 1);
                }
            }   
        }
        
        numSundaes += 1;
        ItemCost();
    }//GEN-LAST:event_SundaeActionPerformed
   
    private void KelpShakeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KelpShakeBActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 1.75;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        
        if (numKelpShakes == 0){
            model.addRow(new Object[]{"Kelp Shake", "1", PriceOfItem});
        }
        else {
            int numRows = model.getRowCount();
            for (int i = 0; i < numRows; i++){
                if (model.getValueAt(i, 0).toString() == "Kelp Shake"){
                    model.setValueAt(numKelpShakes + 1, i, 1);
                }
            }   
        }
        
        numKelpShakes += 1;
        ItemCost();
    }//GEN-LAST:event_KelpShakeBActionPerformed
    
    private void RootBeerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RootBeerActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 1.25;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        if ( numRootBeers == 0){
            model.addRow(new Object[]{"Root Beer", "1", PriceOfItem});
        }
        else {
            int numRows = model.getRowCount();
            for (int i = 0; i < numRows; i++){
                if (model.getValueAt(i, 0).toString() == "Root Beer"){
                    model.setValueAt(numRootBeers+ 1, i, 1);
                }
            }   
        }
        
        numRootBeers += 1;
        ItemCost();
    }//GEN-LAST:event_RootBeerActionPerformed
   
    private void SpriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpriteActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 1.25;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        if (numSprites == 0){
            model.addRow(new Object[]{"Sprite", "1", PriceOfItem});
        }
        else {
            int numRows = model.getRowCount();
            for (int i = 0; i < numRows; i++){
                if (model.getValueAt(i, 0).toString() == "Sprite"){
                    model.setValueAt(numSprites + 1, i, 1);
                }
            }   
        }
        
        numSprites += 1;
        ItemCost();
    }//GEN-LAST:event_SpriteActionPerformed
    
    private void SeafoamSodaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeafoamSodaActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 1.25;
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        if ( numSeaSodas == 0){
            model.addRow(new Object[]{"Sea Soda", "1", PriceOfItem});
        }
        else {
            int numRows = model.getRowCount();
            for (int i = 0; i < numRows; i++){
                if (model.getValueAt(i, 0).toString() == "Sea Soda"){
                    model.setValueAt(numSeaSodas + 1, i, 1);
                }
            }   
        }
        
        numSeaSodas += 1;
        ItemCost();
    }//GEN-LAST:event_SeafoamSodaActionPerformed
    
    private void DrPepperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrPepperActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 1.25;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        if ( numDrPeppers == 0){
            model.addRow(new Object[]{"Dr. Pepper", "1", PriceOfItem});
        }
        else {
            int numRows = model.getRowCount();
            for (int i = 0; i < numRows; i++){
                if (model.getValueAt(i, 0).toString() == "Dr. Pepper"){
                    model.setValueAt(numDrPeppers + 1, i, 1);
                }
            }   
        }
        
        numDrPeppers += 1;
        ItemCost();
    }//GEN-LAST:event_DrPepperActionPerformed

    
    private void CoralBitsSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoralBitsSActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 1.50;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        
        if ( numCoralBits == 0){
            model.addRow(new Object[]{"Coral Bits", "1", PriceOfItem});
        }
        else {
            int numRows = model.getRowCount();
            for (int i = 0; i < numRows; i++){
                if (model.getValueAt(i, 0).toString() == "Coral Bits"){
                    model.setValueAt(numCoralBits + 1, i, 1);
                }
            }   
        }
        
        numCoralBits += 1;
        ItemCost();
    }//GEN-LAST:event_CoralBitsSActionPerformed
    
    private void AnenomeSticksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnenomeSticksActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 1.25;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        
        if ( numSticks == 0){
            model.addRow(new Object[]{"Anemone Sticks", "1", PriceOfItem});
        }
        else {
            int numRows = model.getRowCount();
            for (int i = 0; i < numRows; i++){
                if (model.getValueAt(i, 0).toString() == "Anemone Sticks"){
                    model.setValueAt(numSticks + 1, i, 1);
                }
            }   
        }
        
        numSticks += 1;
        ItemCost();
    }//GEN-LAST:event_AnenomeSticksActionPerformed
    
    private void KelpRingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KelpRingsActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 1.50;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        if ( numKelpRings == 0){
            model.addRow(new Object[]{"Kelp Rings", "1", PriceOfItem});
        }
        else {
            int numRows = model.getRowCount();
            for (int i = 0; i < numRows; i++){
                if (model.getValueAt(i, 0).toString() == "Kelp Rings"){
                    model.setValueAt(numKelpRings + 1, i, 1);
                }
            }   
        }
        
        numKelpRings += 1;
        ItemCost();
    }//GEN-LAST:event_KelpRingsActionPerformed

    private void GarysGibbleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GarysGibbleActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 2.25;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        if ( numGGs == 0){
            model.addRow(new Object[]{"Gary's Gibble", "1", PriceOfItem});
        }
        else {
            int numRows = model.getRowCount();
            for (int i = 0; i < numRows; i++){
                if (model.getValueAt(i, 0).toString() == "Gary's Gibble"){
                    model.setValueAt(numGGs + 1, i, 1);
                }
            }   
        } 
        numGGs += 1;
        ItemCost();
    }//GEN-LAST:event_GarysGibbleActionPerformed
   
    private void SaltySeaDogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaltySeaDogActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 2.75;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        
        if ( numSeaDogs == 0){
            model.addRow(new Object[]{"Sea Dog", "1", PriceOfItem});
        }
        else {
            int numRows = model.getRowCount();
            for (int i = 0; i < numRows; i++){
                if (model.getValueAt(i, 0).toString() == "Sea Dog"){
                    model.setValueAt(numSeaDogs + 1, i, 1);
                }
            }   
        }
        
        numSeaDogs += 1;  
        ItemCost();
    }//GEN-LAST:event_SaltySeaDogActionPerformed
    
    private void SailorsSupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SailorsSupActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 4.99;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        if ( numSuprises == 0){
            model.addRow(new Object[]{"Sailor Surprise", "1", PriceOfItem});
        }
        else {
            int numRows = model.getRowCount();
            for (int i = 0; i < numRows; i++){
                if (model.getValueAt(i, 0).toString() == "Sailor Surprise"){
                    model.setValueAt(numSuprises + 1, i, 1);
                }
            }   
        }
        
        numSuprises += 1;
        ItemCost();
    }//GEN-LAST:event_SailorsSupActionPerformed
    
    private void KrabbyPattyEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KrabbyPattyEActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 4.25;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"Krabby Patty", "1", PriceOfItem});
        
        
        numKPs += 1;
        ItemCost();
    }//GEN-LAST:event_KrabbyPattyEActionPerformed
    
    private void TripleKPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TripleKPActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 5.75;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel(); 
        model.addRow(new Object[]{"TKB", "1", PriceOfItem});
        
        
        numTKPs += 1;
        ItemCost();
    }//GEN-LAST:event_TripleKPActionPerformed
   
    private void FootlongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FootlongActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 3.55;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"Footlong", "1", PriceOfItem});
      
        numFootlongs += 1;
        ItemCost();
    }//GEN-LAST:event_FootlongActionPerformed
    
    private void GoldenLoafActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoldenLoafActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 3.25;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"Golden Loaf", "1", PriceOfItem});
        
        
        numLoafs += 1;
        ItemCost();
    }//GEN-LAST:event_GoldenLoafActionPerformed

    private void DoubleKPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoubleKPActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 5.25;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"DKB", "1", PriceOfItem});
       
        
        numDKPs += 1;
        ItemCost();
    }//GEN-LAST:event_DoubleKPActionPerformed

    private void kelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kelpActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 0;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"RM. Kelp", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_kelpActionPerformed

    private void mustardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mustardActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 0;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"RM. Mustard", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_mustardActionPerformed

    private void bunsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bunsActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 0;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"RM. Buns", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_bunsActionPerformed

    private void ketchupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ketchupActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 0;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"RM. Ketchup", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_ketchupActionPerformed

    private void jellyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jellyActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 0;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"RM. Jelly", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_jellyActionPerformed

    private void pattyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pattyActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 0;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"RM. Patty", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_pattyActionPerformed

    private void seaSaltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seaSaltActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 0;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"RM. Sea Salt", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_seaSaltActionPerformed

    private void seaPicklesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seaPicklesActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 0;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"RM. Pickles", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_seaPicklesActionPerformed

    private void seaWeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seaWeedActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 0;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"RM. Seaweed", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_seaWeedActionPerformed

    private void saltySauceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saltySauceActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 0;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"RM. Salty Sauce", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_saltySauceActionPerformed

    private void seaCucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seaCucActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 0;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"RM. Sea Cuc.", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_seaCucActionPerformed

    private void KrabbyPattyRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KrabbyPattyRActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 4.25;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"Krabby Patty", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_KrabbyPattyRActionPerformed

    private void KelpShakeRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KelpShakeRActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 1.25;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"Kelp Shake", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_KelpShakeRActionPerformed

    private void CoralBitsR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoralBitsR1ActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 1.50;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"Coral Bits", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_CoralBitsR1ActionPerformed

    private void printRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printRActionPerformed
        // TODO add your handling code here:
        MessageFormat header = new MessageFormat("Printing in progress");
        MessageFormat footer = new MessageFormat("Page {0, number, integer}");
        
        try
        {
            table.print(JTable.PrintMode.NORMAL,header,footer);
        }
        catch (java.awt.print.PrinterException e)
        {
            System.err.format("No Printer Found", e.getMessage());
        }
        
    }//GEN-LAST:event_printRActionPerformed

private JFrame frame;
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        frame = new JFrame("Exit");
        if (JOptionPane.showConfirmDialog(frame, "Confirm if you want to exit.", "Point of Sale", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION)
        {
            System.exit(0);
        }
    }//GEN-LAST:event_exitActionPerformed

private JFrame frame2;
    private void custLnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custLnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_custLnActionPerformed

    private void custFnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custFnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_custFnActionPerformed

    private void payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payActionPerformed
        numCookies = 0; numSundaes = 0; numChocolateBars = 0;
        // close();
        Pay newF = new Pay(this.table.getModel(), cTotal, cTax);
        newF.setVisible(true);
   
        try {
            conn = DriverManager.getConnection(dataConn, username, password);
        }
        catch (Exception e) {
            e.printStackTrace();
            System.err.println(e.getClass().getName()+": "+e.getMessage());
            System.exit(0);
        }
        
        System.out.println("Connected to database successful");
        int customerid = 0;
        int orderid = 0;
       
        try {
            // Get last customerID
            String sqlQuery = "SELECT MAX(customerid) AS customerid FROM \"Customers\"";
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sqlQuery);
            rs.next();
            
            customerid = Integer.parseInt(rs.getString("customerid")) + 1;
            System.out.println("CustomerID: " + customerid);
            
            sqlQuery = "SELECT MAX(orderid) as orderid FROM orders";
            rs = stmt.executeQuery(sqlQuery);
            rs.next();
            orderid = Integer.parseInt(rs.getString("orderid")) + 1;
            System.out.println("OrderID: " + orderid);
        } catch (Exception e){
            System.out.println("Error accessing last orderID");
        }
        
       
        try {
            /* Adding to Customers */
            pst = conn.prepareStatement("INSERT INTO \"Customers\"(customerid, firstname, lastname, lastorderid)"
               + "VALUES(?, ?, ?, ?)");

            pst.setInt(1, customerid);
            pst.setString(2, custFn.getText());
            pst.setString(3, custLn.getText());
            pst.setInt(4, -1);

           pst.executeUpdate();
        }
        catch (Exception e){
            System.out.println("Error updating customer table");
        }   
        
        /* Adding to Orders */
         try {
            pst = conn.prepareStatement("INSERT INTO orders(customerid, orderid, employeeid, price, date)"
            + "VALUES(?, ?, ?, ?, ?)");
            
            pst.setInt(1, customerid);
            pst.setInt(2, orderid);
            pst.setInt(3, 1);
            pst.setDouble(4, finalCost);
            pst.setString(5, "2019-03-11");
            
            pst.executeUpdate();
        }
        catch (Exception e){
            System.out.println("Error updating orders table");
        }
        
          try {        
            /* Adding to entrees */
            pst = conn.prepareStatement("INSERT INTO entrees(orderid, footlong, seadog, kp, goldenloaf, sailorssurprise, dkp, tkp)" + 
                    "VALUES(?,?,?,?,?,?,?,?)");
            pst.setInt(1, orderid);
            pst.setInt(2, numFootlongs);
            pst.setInt(3, numSeaDogs);
            pst.setInt(4, numKPs);
            pst.setInt(5, numLoafs);
            pst.setInt(6, numSuprises);
            pst.setInt(7, numDKPs);
            pst.setInt(8, numTKPs);
            
            pst.executeUpdate();
        } catch (Exception e){
            System.out.println("Error updating entrees table");
        }
        
        try {
            /* Adding sides */
            pst = conn.prepareStatement("INSERT INTO sides(orderid, coralbits, kelprings, anemonesticks, garygibble)" +
                    "VALUES(?,?,?,?,?)");
            pst.setInt(1, orderid);
            pst.setInt(2, numCoralBits);
            pst.setInt(3, numKelpRings);
            pst.setInt(4, numSticks);
            pst.setInt(5, numGGs);
            
            pst.executeUpdate();
        }
        catch (Exception e){
            System.out.println("Error updating sides table");
        }
        
        try {
             /* Adding to beverages */
            pst = conn.prepareStatement("INSERT INTO beverages(orderid, kelpshake, foamsoda, rootbeer, drpepper, sprite)" +
                    "VALUES(?,?,?,?,?,?)");
            pst.setInt(1, orderid);
            pst.setInt(2, numKelpShakes);
            pst.setInt(3, numSeaSodas);
            pst.setInt(4, numRootBeers);
            pst.setInt(5, numDrPeppers);
            pst.setInt(6, numSprites);
            
            pst.executeUpdate();
        }
         catch (Exception e){
            System.out.println("Error updating beverages table");
        }
        
        try {
             /* Adding to desserts */
            pst = conn.prepareStatement("INSERT INTO desserts(orderid, cookie, chocolate, sundae)" +
                    "VALUES(?,?,?,?)");
            pst.setInt(1, orderid);
            pst.setInt(2, numCookies);
            pst.setInt(3, numChocolateBars);
            pst.setInt(4, numSundaes);
            
            pst.executeUpdate();
        }
          catch (Exception e){
            System.out.println("Error updating desserts table");
        }
 
    }//GEN-LAST:event_payActionPerformed

    private void smallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smallActionPerformed
        // TODO add your handling code here:
        double PriceOfItem = 0.25;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"SMALL", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_smallActionPerformed

    private void mediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediumActionPerformed

        double PriceOfItem = 0.50;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"MEDIUM", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_mediumActionPerformed

    private void largeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_largeActionPerformed

        double PriceOfItem = 0.75;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"LARGE", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_largeActionPerformed

    private void customActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customActionPerformed

        double PriceOfItem = 1.00;
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(new Object[]{"CUSTOM", "1", PriceOfItem});
        ItemCost();
    }//GEN-LAST:event_customActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        // TODO add your handling code here:  
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int selectedRow = table.getSelectedRow();
        int quantity = Integer.parseInt(table.getModel().getValueAt(selectedRow, 1).toString());
        String itemName = table.getModel().getValueAt(selectedRow, 0).toString();
       
        if (quantity == 1){
            model.removeRow(selectedRow);
        }
        else {
            model.setValueAt(quantity - 1, selectedRow, 1);
        }
        
        ItemCost();
        
        switch (itemName){
            case "Chocolate Bar":
                numChocolateBars -= 1;
                break;
            case "Sundae":
                numSundaes -= 1;
                break;
            case "Cookie":
                numCookies -= 1;
                break;
            /* Beverages */
            case "Kelp Shake":
                numKelpShakes -= 1;
                break;
            case "Sea Soda":
                numSeaSodas -= 1;
                break;
            case "Root Beer":
                numRootBeers -= 1;
                break;
            case "Dr. Pepper":
                numDrPeppers -= 1;
                break;
            case "Sprite":
                numSprites -= 1;
                break;
            /* Sides */
            case "Coral Bits":
                numCoralBits -= 1;
                break;
            case "Anemone Sticks":
                numSticks -= 1;
                break;
            case "Gary's Gibble":
                numGGs -= 1;
                break;
            case "Kelp Rings":
                numKelpRings -= 1;
                break;
            /* Entrees */            
            case "Sea Dog":
                numSeaDogs -= 1;
                break;
            case "Footlong":
                numFootlongs -= 1;
                break;
            case "Sailor Suprise":
                numSuprises -= 1;
                break;
            case "Golden Loaf":
                numLoafs -= 1;
            case "Krabby Patty":
                numKPs -= 1;
            case "DKB":
                numDKPs -= 1;
            case "TKB":
                numTKPs -= 1;
                break;
        }
        
    }//GEN-LAST:event_removeBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        String name;
        int lastOrderID = -1;
        
        String firstname = custFn.getText();
        String lastname = custLn.getText();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        
        try {
            conn = DriverManager.getConnection(dataConn, username, password);
        }
        catch (Exception e) {
            e.printStackTrace();
            System.err.println(e.getClass().getName()+": "+e.getMessage());
            System.exit(0);
        }
        
        System.out.println("Connected to database successful");
        try {
            pst = conn.prepareStatement("SELECT MAX(orderid) AS orderid FROM orders WHERE customerid IN" + 
                "(SELECT customerid FROM customers WHERE firstname=? AND lastname=?)");
            
            pst.setString(1, firstname);
            pst.setString(2, lastname);
            
            rs = pst.executeQuery();
            rs.next();
            
            if (rs.next()){
                lastOrderID = rs.getInt("orderid");
            }
            else {
                JOptionPane.showMessageDialog(this, "No past order history");
            }
                  
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Could not find lastOrderID");
            System.exit(0);
        }
        
        if (lastOrderID == -1)
            return;
        
        System.out.println(lastOrderID);
        try {
            pst = conn.prepareStatement("SELECT * FROM entrees WHERE orderid = ?");
            pst.setInt(1, lastOrderID);
            rs = pst.executeQuery();
            rs.next();
            
            int footlongs = rs.getInt("footlong");
            int seadogs = rs.getInt("seadog");
            int KBs = rs.getInt("kp");
            int goldenloafs = rs.getInt("goldenloaf");
            int sailors = rs.getInt("sailorssurprise");
            int DKPs = rs.getInt("dkp");
            int TKPs = rs.getInt("tkp");
            
            if (footlongs > 0) { model.addRow(new Object[] {"Footlong", footlongs, 3.55}); }
            if (seadogs > 0) { model.addRow(new Object[] {"Sea dog", seadogs, 2.75}); }
            if (KBs > 0) { model.addRow(new Object[] {"Krabby Patty", KBs, 4.25}); }
            if (goldenloafs > 0) { model.addRow(new Object[] {"Golden Loaf", goldenloafs, 3.25});}
            if (sailors > 0) { model.addRow(new Object[] {"Sailor Suprise", sailors, 4.99});}
            if (DKPs > 0) { model.addRow(new Object[] {"DKB", DKPs, 5.25});}
        }
        catch (Exception e) {
            e.printStackTrace();
            System.out.println("Could not find entrees");
            System.exit(0);
        }
        
        try {
            pst = conn.prepareStatement("SELECT * FROM beverages WHERE orderid = ?");
            pst.setInt(1, lastOrderID);
            rs = pst.executeQuery();
            rs.next();
            
            int kelpOrders = rs.getInt("kelpshake");
            int sodaOrders = rs.getInt("foamsoda");
            int rootbeerOrders = rs.getInt("rootbeer");
            int drpepperOrders = rs.getInt("drpepper");
            int spriteOrders = rs.getInt("sprite");
            
            if (kelpOrders > 0) { model.addRow(new Object[] {"Kelp Shake", kelpOrders, 1.75}); }
            if (sodaOrders > 0) { model.addRow(new Object[] {"Foam Soda", sodaOrders, 1.25}); }
            if (rootbeerOrders > 0) { model.addRow(new Object[] {"Root Beer", rootbeerOrders, 1.25}); }
            if (drpepperOrders > 0) { model.addRow(new Object[] {"Dr. Pepper", drpepperOrders, 1.25});}
            if (spriteOrders > 0) { model.addRow(new Object[] {"Sprite", spriteOrders, 1.25});}  
        }
        catch (Exception e) {
            e.printStackTrace();
            System.out.println("Could not find entrees");
            System.exit(0);
        }
       
        try {
            pst = conn.prepareStatement("SELECT * FROM sides WHERE orderid = ?");
            pst.setInt(1, lastOrderID);
            rs = pst.executeQuery();
            rs.next();
            
            int coralBits = rs.getInt("coralbits");
            int kelpRings = rs.getInt("kelprings");
            int sticks = rs.getInt("anemonesticks");
            int garys_gibble = rs.getInt("garygibble");
           
            
            if (coralBits > 0) { model.addRow(new Object[] {"Coral Bits", coralBits, 1.50}); }
            if (kelpRings > 0) { model.addRow(new Object[] {"Kelp Rings", kelpRings, 1.50}); }
            if (sticks > 0) { model.addRow(new Object[] {"Anemone Sticks", sticks, 1.25}); }
            if (garys_gibble > 0) { model.addRow(new Object[] {"Dr. Pepper", garys_gibble, 2.25});}
        }
        catch (Exception e) {
            e.printStackTrace();
            System.out.println("Could not find entrees");
            System.exit(0);
        }

        try {
            pst = conn.prepareStatement("SELECT * FROM desserts WHERE orderid = ?");
            pst.setInt(1, lastOrderID);
            rs = pst.executeQuery();
            rs.next();
            
            int cookieOrders = rs.getInt("cookie");
            int chocolateOrders = rs.getInt("chocolate");
            int sundaeOrders = rs.getInt("sundae");
            
            if (cookieOrders > 0) { model.addRow(new Object[] {"Cookie", cookieOrders, 0.75}); }
            if (chocolateOrders > 0) { model.addRow(new Object[] {"Chocolate Bar", chocolateOrders, 1.00}); }
            if (sundaeOrders > 0) { model.addRow(new Object[] {"Sundae", sundaeOrders, 2.25}); }
   
            ItemCost();
        }
        catch (Exception e) {
            e.printStackTrace();
            System.out.println("Could retreive last dessert order");
            System.exit(0);
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerGUI().setVisible(true);
            }
        });
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnenomeSticks;
    private javax.swing.JLabel Beverages;
    private javax.swing.JButton Chocolate;
    private javax.swing.JButton Cookie;
    private javax.swing.JButton CoralBitsR1;
    private javax.swing.JButton CoralBitsS;
    private javax.swing.JLabel Desserts;
    private javax.swing.JButton DoubleKP;
    private javax.swing.JButton DrPepper;
    private javax.swing.JLabel Entrees;
    private javax.swing.JLabel Entrees1;
    private javax.swing.JButton Footlong;
    private javax.swing.JButton GarysGibble;
    private javax.swing.JButton GoldenLoaf;
    private javax.swing.JButton KelpRings;
    private javax.swing.JButton KelpShakeB;
    private javax.swing.JButton KelpShakeR;
    private javax.swing.JButton KrabbyPattyE;
    private javax.swing.JButton KrabbyPattyR;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton RootBeer;
    private javax.swing.JButton SailorsSup;
    private javax.swing.JButton SaltySeaDog;
    private javax.swing.JButton SeafoamSoda;
    private javax.swing.JLabel Sides;
    private javax.swing.JButton Sprite;
    private javax.swing.JButton Sundae;
    private javax.swing.JLabel Title;
    private javax.swing.JButton TripleKP;
    private javax.swing.JPanel bill;
    private javax.swing.JButton buns;
    private javax.swing.JLabel custFN;
    private javax.swing.JTextField custFn;
    private javax.swing.JLabel custLN;
    private javax.swing.JTextField custLn;
    private javax.swing.JButton custom;
    private javax.swing.JLabel date;
    private javax.swing.JButton delete;
    private javax.swing.JButton exit;
    private javax.swing.JLabel instr1;
    private javax.swing.JLabel instr1a;
    private javax.swing.JLabel instr1b;
    private javax.swing.JLabel instr1b2;
    private javax.swing.JLabel instr2;
    private javax.swing.JLabel instr3;
    private javax.swing.JLabel instr4;
    private javax.swing.JLabel instr5;
    private javax.swing.JLabel instructions;
    private javax.swing.JButton jelly;
    private javax.swing.JButton kelp;
    private javax.swing.JButton ketchup;
    private javax.swing.JButton large;
    private javax.swing.JLabel lbSubT;
    private javax.swing.JLabel lbSubT1;
    private javax.swing.JLabel lbSubT2;
    private javax.swing.JLabel logo;
    private javax.swing.JButton medium;
    private javax.swing.JButton mustard;
    private javax.swing.JPanel options;
    private javax.swing.JButton patty;
    private javax.swing.JButton pay;
    private javax.swing.JLabel popular;
    private javax.swing.JButton printR;
    private javax.swing.JButton removeBtn;
    private javax.swing.JButton saltySauce;
    private javax.swing.JScrollPane scrollBar;
    private javax.swing.JButton seaCheese;
    private javax.swing.JButton seaCuc;
    private javax.swing.JButton seaPickles;
    private javax.swing.JButton seaSalt;
    private javax.swing.JButton seaWeed;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton small;
    private javax.swing.JTextField subT;
    private javax.swing.JTable table;
    private javax.swing.JTextField tax;
    private javax.swing.JTextField totalText;
    private javax.swing.JTextField total_text;
    // End of variables declaration//GEN-END:variables
}
